// lib/presentation/providers/loan_provider.dart
import 'package:flutter/material.dart';
import 'package:loan_app/data/models/loan_model.dart';
import 'package:loan_app/data/repositories/loan_repository_impl.dart';
import 'package:loan_app/domain/repositories/i_loan_repository.dart';
import 'package:loan_app/data/repositories/client_repository.dart'; // üí° Importa el repositorio de clientes
import 'package:loan_app/domain/entities/client.dart'; // üí° Importa la entidad Cliente
import 'package:loan_app/domain/repositories/i_loan_repository.dart';

/// [LoanProvider] gestiona el estado de los pr√©stamos y las interacciones con el repositorio.
/// Utiliza ChangeNotifier para notificar a los oyentes (widgets de la UI) sobre los cambios.
class LoanProvider extends ChangeNotifier {
  // Instancia del repositorio de pr√©stamos para interactuar con la base de datos.
  final LoanRepository  _loanRepository = LoanRepositoryImpl();
  final ClientRepository _clientRepository = ClientRepository(); // üí° Instancia del repositorio de clientes

  // Lista privada de pr√©stamos. Se actualiza cada vez que hay cambios.
  List<LoanModel> _loans = [];
  List<LoanModel> get loans => _loans;

  // Indicador de carga para la UI.
  bool _isLoading = false;
  bool get isLoading => _isLoading;

  // Mensaje de error, si ocurre alguno.
  String? _errorMessage;
  String? get errorMessage => _errorMessage;

  LoanProvider() {
    loadLoans();
  }

  /// üí° M√©todo para a√±adir un nuevo cliente
  Future<void> addClient(Client client) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();
    try {
      await _clientRepository.createClient(client);
    } catch (e) {
      _errorMessage = 'Error al a√±adir el cliente: $e';
      debugPrint('Error adding client: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// Carga todos los pr√©stamos desde el repositorio.
  Future<void> loadLoans() async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      _loans = await _loanRepository.getAllLoans();
    } catch (e) {
      _errorMessage = 'Error al cargar los pr√©stamos: $e';
      debugPrint('Error loading loans: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// A√±ade un nuevo pr√©stamo y recarga la lista.
  Future<void> addLoan(LoanModel loan) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      await _loanRepository.addLoan(loan);
      await loadLoans(); // Recarga la lista para reflejar el nuevo pr√©stamo.
    } catch (e) {
      _errorMessage = 'Error al a√±adir el pr√©stamo: $e';
      debugPrint('Error adding loan: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// Actualiza un pr√©stamo existente y recarga la lista.
  Future<void> updateLoan(LoanModel loan) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      await _loanRepository.updateLoan(loan);
      await loadLoans(); // Recarga la lista para reflejar los cambios.
    } catch (e) {
      _errorMessage = 'Error al actualizar el pr√©stamo: $e';
      debugPrint('Error updating loan: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// Marca un pr√©stamo como pagado y recarga la lista.
  Future<void> markLoanAsPaid(String loanId) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      await _loanRepository.markLoanAsPaid(loanId);
      await loadLoans(); // Recarga la lista para reflejar el cambio de estado.
    } catch (e) {
      _errorMessage = 'Error al marcar el pr√©stamo como pagado: $e';
      debugPrint('Error marking loan as paid: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// Elimina un pr√©stamo y recarga la lista.
  Future<void> deleteLoan(String loanId) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      await _loanRepository.deleteLoan(loanId);
      await loadLoans(); // Recarga la lista para reflejar la eliminaci√≥n.
    } catch (e) {
      _errorMessage = 'Error al eliminar el pr√©stamo: $e';
      debugPrint('Error deleting loan: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
}